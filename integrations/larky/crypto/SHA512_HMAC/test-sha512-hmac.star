load("@stdlib//unittest", "unittest")
load("@vendor//asserts", "asserts")
load("@stdlib//hashlib", "hashlib")
load("@stdlib//binascii", "binascii")
load("@vgs//vault", "vault")
load("@vgs//http/request", "VGSHttpRequest")
load("@stdlib//json", "json")
load("@stdlib//builtins", builtins="builtins")
load("@stdlib//base64", base64="base64")
load("@vendor//Crypto/Hash/HMAC", HMAC="HMAC")
load("@vendor//Crypto/Hash/SHA512", SHA512="SHA512")


def process(input, ctx):
    headers = input.headers
    method = 'POST'
    uri = '/post'
    content_type = headers['content-type']
    date = headers['date']
    secret = headers['shared-secret']
    body_utf8 = bytes(input.body, encoding="utf-8")
    signature = SHA512.new(body_utf8).hexdigest()
    hmac_input = "\n".join(
        [
            method,
            signature,
            content_type,
            date,
            uri
        ]
    )
    hmac_input = bytes(hmac_input, encoding="utf-8")
    secret = bytes(secret, encoding="utf-8")
    hash_value = HMAC.new(secret, hmac_input, digestmod=SHA512).digest()
    result = base64.b64encode(hash_value)
    body = {
      "signature": str(signature),
      "result": str(result)
    }
    headers.pop("shared-secret")
    input.headers = headers
    input.body = builtins.bytes(json.dumps(body))
    return input


def test_process():
    # keys below  are not real (generated by randomizer)
    headers = {
        'content-type': 'application/json',
        'date': 'Sun, 18 Sep 2022 10:52:03 UTC',
        'shared-secret': '3vQE4R45Q4yz7dMDHUz56waSnnPD7P'
    }
    body = b'{"merchantTransactionId":"2022-09-18-0004","amount":"9.99","currency":"EUR"}'
    input = VGSHttpRequest("https://test.com/post", data=body, headers=headers, method='POST')
    response = process(input, None)
    expected_body = b'{"result":"Jv/5lhIKjbxcNvJaFl5PaL6hLwJHIhh7QpLaj3o4CcrzwERR9SCndecvHGPnocrnqKy7MdUpXyle9EvK58M5WQ==","signature":"f81d760b6fec9f1fc330401293c0b7add20f7ae0db5a4265b3cc69e8ece609947c2488f9e495cdbf9bbc3134c51ee2ef896d07d370d5ed3f95183305b5706fd6"}'
    print(response.body)
    print(expected_body)
    asserts.assert_that(response.body).is_equal_to(expected_body)


def _testsuite():
  _suite = unittest.TestSuite()
  _suite.addTest(unittest.FunctionTestCase(test_process))
  return _suite

_runner = unittest.TextTestRunner()
_runner.run(_testsuite())