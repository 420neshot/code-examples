load("@stdlib//unittest", "unittest")
load("@vendor//asserts", "asserts")
load("@stdlib//hashlib", "hashlib")
load("@stdlib//binascii", "binascii")
load("@vgs//vault", "vault")
load("@vgs//http/request", "VGSHttpRequest")
load("@stdlib//builtins", builtins="builtins")
load("@stdlib//base64", base64="base64")
load("@stdlib//json", json="json")
load("@stdlib//larky", larky="larky")
load("@vendor//Crypto/Hash", MD5="MD5")


def process(input, ctx):
    body = json.loads(str(input.body))
    thing = body['message']
    md5 = MD5.new()
    md5.update(bytes(thing, 'utf-8'))
    body.pop('message')
    body['hash'] = md5.hexdigest()
    input.body = builtins.bytes(json.dumps(body))
    return input


def test_process():
    # keys below are not real (generated by randomizer)
    headers = {}
    body = b'{"message": "4242424242424242"}'
    input = VGSHttpRequest("https://test.com/post", data=body, headers=headers, method='POST')
    response = process(input, None)
    expected_body = b'{"hash":"9b8a421bff5f30d20f118185eb6e4523"}'
    print(response.body)
    print(expected_body)
    asserts.assert_that(response.body).is_equal_to(expected_body)


def _testsuite():
  _suite = unittest.TestSuite()
  _suite.addTest(unittest.FunctionTestCase(test_process))
  return _suite

_runner = unittest.TextTestRunner()
_runner.run(_testsuite())
