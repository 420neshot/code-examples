load("@stdlib//unittest", "unittest")
load("@vendor//asserts", "asserts")
load("@stdlib//hashlib", "hashlib")
load("@stdlib//binascii", "binascii")
load("@vgs//vault", "vault")
load("@vgs//http/request", "VGSHttpRequest")
load("@stdlib//base64", base64="base64")
load("@vendor//Crypto/Hash/HMAC", HMAC="HMAC")
load("@vendor//Crypto/Hash/SHA256", SHA256="SHA256")
load("@stdlib//builtins", builtins="builtins")
load("@stdlib//json", json="json")
load("@stdlib//codecs", codecs="codecs")


def process(input, ctx):
    body_str = str(input.body)
    body = json.loads(body_str)

    headers = input.headers
    keyId = headers.get("x-key-id")
    secret = headers.get("x-secret-key")
    host = headers.get("x-host")
    endPoint = input.path
    merchantId = headers.get("v-c-merchant-id")
    date = headers.get("date")
    body = input.body
    body_utf8 = bytes(body, encoding="utf-8")
    digestStr = "SHA-256=" + base64.b64encode(
      SHA256.new(body_utf8).digest()
    ).decode("utf-8")
    headers["Digest"] = digestStr
    sigParamHeadersStr = "\n".join(
      [
          "x-host: " + host,
          "date: " + date,
          "(request-target): post " + endPoint,
          "digest: " + digestStr,
          "v-c-merchant-id: " + merchantId
      ]
    )
    sig_value_utf = bytes(sigParamHeadersStr, encoding="utf-8")
    secret = base64.b64decode(secret)
    hash_value = HMAC.new(secret, sig_value_utf, digestmod=SHA256)
    sigParamHmac = base64.b64encode(hash_value.digest()).decode("utf-8")
    headers["Signature"] = str(
      'keyid="'
      + keyId
      + '",algorithm="HmacSHA256",headers="x-host date (request-target) digest v-c-merchant-id",signature="'
      + sigParamHmac
      + '"'
    )
    body = {"encrypted":"true"}

    headers.pop("x-secret-key")
    headers.pop("x-key-id")                     
    input.headers = headers
    input.body = builtins.bytes(json.dumps(body))
    return input


def test_process():
    # keys below  are not real (generated by randomizer)
    headers = {
        "x-key-id": "17a61221-d72d-fd43-bf45-dae4e13befe5",
        "x-secret-key": "xy6yBM2J/1LjPGTmcuHtk+GaJrkPp+UYe25fUX6/LtE=",
        "v-c-merchant-id": "testrest",
        "x-host": "apitest.psp.com",
        "date": "Sun, 18 Sep 2022 10:59:14 GMT" # static for testing purposes
    }
    body = b'{"paymentInformation":{"card": {"expirationMonth":"12","expirationYear":"2030","number":"4242424242424242","securityCode":"321","type":"002"}}}'
    input = VGSHttpRequest("https://tntbmt67sc7.sandbox.verygoodproxy.com/post", data=body, headers=headers, method='POST')
    response = process(input, None)
    expected_headers = { # since response.headers is Dictionary
        "v-c-merchant-id": "testrest",
        "x-host": "apitest.psp.com",
        "date": "Sun, 18 Sep 2022 10:59:14 GMT",
        "Digest": "SHA-256=oLAIBV+UuDeuXx4PUV8WtDHG5y+93dWOnYGCUxmXsX4=",
        "Signature": "keyid=\"17a61221-d72d-fd43-bf45-dae4e13befe5\",algorithm=\"HmacSHA256\",headers=\"x-host date (request-target) digest v-c-merchant-id\",signature=\"KtTlw8mTHAxr3dxZZAksjpgx2eZhOpYODIssbbYfdHE=\""
    }
    print(response.headers)
    print(expected_headers)
    asserts.assert_that(response.headers).is_equal_to(expected_headers)


def _testsuite():
  _suite = unittest.TestSuite()
  _suite.addTest(unittest.FunctionTestCase(test_process))
  return _suite

_runner = unittest.TextTestRunner()
_runner.run(_testsuite())