import gnupg
import os
import base64
import requests
import json
import sys
from dotenv import load_dotenv






def generate_keys(email, name):
    # getting PP from user
    pp = input('>>> Enter passphrase: ')
    # generating new key-pair
    gpg = gnupg.GPG('/usr/local/bin/gpg')
    gpg.encoding = 'utf-8'
    key_input_data = gpg.gen_key_input(name_email=email,
                                       passphrase=pp,
                                       key_type='RSA',
                                       key_length='2048',
                                       name_real=name,
                                       name_comment='generated by quick_start.py')
    # generating key-pair
    finger = str(gpg.gen_key(key_input_data))
    print('>>> Fingerprint: ', finger)
    print('>>> SUCCESS!')


def create_aliases(vault, env, email):
    # getting PP and fingerprint from user
    pp = input('>>> Enter passphrase: ')
    # getting private_key from PGP using FP
    gpg = gnupg.GPG('/usr/local/bin/gpg')
    gpg.encoding = 'utf-8'
    private_key = str(gpg.export_keys(email, True, passphrase=pp))
    public_key = str(gpg.export_keys(email))

    # preparing the keys
    private_key = private_key.replace('-----BEGIN PGP PRIVATE KEY BLOCK-----\n\n','')
    private_key = private_key.replace('-----END PGP PRIVATE KEY BLOCK-----\n','')
    private_key = private_key[:private_key.rfind('\n')] # removes last empty line
    private_key = base64.b64encode(bytes(private_key,'utf-8')).decode('utf-8')
    #print('>>> private_key:')
    #print(private_key)

    public_key = public_key.replace('-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n','')
    public_key = public_key.replace('-----END PGP PUBLIC KEY BLOCK-----\n','')
    public_key = public_key[:public_key.rfind('\n')] # removes last empty line
    public_key = base64.b64encode(bytes(public_key,'utf-8')).decode('utf-8')
    #print('>>> public_key:')
    #print(public_key)

    # aliasing the key and passphrase
    payload = {
      "private_key": private_key,
      "public_key": public_key,
      "pass": pp
    }
    r = requests.post(url='https://' + vault + '.' + env + '.verygoodproxy.com/post',
                      json=payload) 
    body = json.loads(r.text)
    print('>>> private_key alias: ', body['private_key'])
    print('>>> public_key alias:  ', body['public_key'])
    print('>>> passphrase alias:  ', body['pass'])
    print('>>> SUCCESS!')



def encrypt_file(filename, email):
    gpg = gnupg.GPG('/usr/local/bin/gpg')
    with open(filename, 'rb') as f:
        status = gpg.encrypt_file(f, email, output=filename+'.encrypted')
    print(status.ok)
    print(status.stderr)
    print('>>> SUCCESS!')



def decrypt_file(filename):
    pp = input('>>> Enter passphrase: ')
    gpg = gnupg.GPG('/usr/local/bin/gpg')
    with open(filename+'.encrypted', 'rb') as f:
        status = gpg.decrypt_file(f, passphrase=pp, output=filename+'.decrypted')
    print(status.ok)
    print(status.stderr)
    print('>>> SUCCESS!')



def usage():
    print(' ')
    print('Usage:')
    print('    python quick_start.py generate_keys')
    print('    python quick_start.py create_aliases')
    print('    python quick_start.py encrypt_file')
    print('    python quick_start.py decrypt_file')
    print(' ')



def main():
    # syntax check
    if len(sys.argv) != 2:
        return usage()

    # reading .env
    load_dotenv()
    vault = os.environ.get('VAULT')
    env = os.environ.get('ENVIRONMENT')
    name = os.environ.get('NAME')
    email = os.environ.get('EMAIL')
    testfile = os.environ.get('TESTFILE')

    cmd = sys.argv[1]
    if cmd == 'generate_keys':
        generate_keys(email, name)

    elif cmd == 'create_aliases':
        create_aliases(vault, env, email)

    elif cmd == 'encrypt_file':
        encrypt_file(testfile, email)

    elif cmd == 'decrypt_file':
        decrypt_file(testfile)

    else:
        return usage()














if __name__ == "__main__":
    main()
    